create table "public"."dashboard_user_invites" (
    "id" bigint generated by default as identity not null,
    "dashboard_id" bigint not null,
    "email_address" text not null,
    "invited_by" uuid not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."dashboard_user_invites" enable row level security;

alter table "public"."dashboard_users" add column "can_manage_meetings" boolean not null default false;

alter table "public"."users" alter column "display_name" drop not null;

CREATE UNIQUE INDEX dashboard_user_invites_pkey ON public.dashboard_user_invites USING btree (id);

alter table "public"."dashboard_user_invites" add constraint "dashboard_user_invites_pkey" PRIMARY KEY using index "dashboard_user_invites_pkey";

alter table "public"."dashboard_user_invites" add constraint "dashboard_user_invites_dashboard_id_fkey" FOREIGN KEY (dashboard_id) REFERENCES dashboards(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."dashboard_user_invites" validate constraint "dashboard_user_invites_dashboard_id_fkey";

alter table "public"."dashboard_user_invites" add constraint "dashboard_user_invites_invited_by_fkey" FOREIGN KEY (invited_by) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."dashboard_user_invites" validate constraint "dashboard_user_invites_invited_by_fkey";

grant delete on table "public"."dashboard_user_invites" to "anon";

grant insert on table "public"."dashboard_user_invites" to "anon";

grant references on table "public"."dashboard_user_invites" to "anon";

grant select on table "public"."dashboard_user_invites" to "anon";

grant trigger on table "public"."dashboard_user_invites" to "anon";

grant truncate on table "public"."dashboard_user_invites" to "anon";

grant update on table "public"."dashboard_user_invites" to "anon";

grant delete on table "public"."dashboard_user_invites" to "authenticated";

grant insert on table "public"."dashboard_user_invites" to "authenticated";

grant references on table "public"."dashboard_user_invites" to "authenticated";

grant select on table "public"."dashboard_user_invites" to "authenticated";

grant trigger on table "public"."dashboard_user_invites" to "authenticated";

grant truncate on table "public"."dashboard_user_invites" to "authenticated";

grant update on table "public"."dashboard_user_invites" to "authenticated";

grant delete on table "public"."dashboard_user_invites" to "service_role";

grant insert on table "public"."dashboard_user_invites" to "service_role";

grant references on table "public"."dashboard_user_invites" to "service_role";

grant select on table "public"."dashboard_user_invites" to "service_role";

grant trigger on table "public"."dashboard_user_invites" to "service_role";

grant truncate on table "public"."dashboard_user_invites" to "service_role";

grant update on table "public"."dashboard_user_invites" to "service_role";

create policy "Dashboard users that can manage users can read user invites"
on "public"."dashboard_user_invites"
as permissive
for select
to authenticated
using ((EXISTS ( SELECT 1
   FROM dashboard_users
  WHERE ((( SELECT auth.uid() AS uid) = dashboard_users.user_id) AND (dashboard_users.dashboard_id = dashboard_users.dashboard_id) AND (dashboard_users.can_manage_users = true)))));


create policy "Dashboard users with access can delete invites"
on "public"."dashboard_user_invites"
as permissive
for delete
to authenticated
using ((EXISTS ( SELECT 1
   FROM dashboard_users
  WHERE ((( SELECT auth.uid() AS uid) = dashboard_users.user_id) AND (dashboard_users.dashboard_id = dashboard_users.dashboard_id) AND (dashboard_users.can_manage_users = true)))));


create policy "Dashboard users with user access can insert invites"
on "public"."dashboard_user_invites"
as permissive
for insert
to authenticated
with check ((EXISTS ( SELECT 1
   FROM dashboard_users
  WHERE ((( SELECT auth.uid() AS uid) = dashboard_users.user_id) AND (dashboard_users.dashboard_id = dashboard_users.dashboard_id) AND (dashboard_users.can_manage_users = true)))));


create policy "Authenticated users can create dashboard_users if no existing u"
on "public"."dashboard_users"
as permissive
for insert
to authenticated
with check (((NOT (EXISTS ( SELECT 1
   FROM dashboard_users du
  WHERE (dashboard_users.dashboard_id = du.dashboard_id)))) AND (user_id = ( SELECT auth.uid() AS uid))));


create policy "Users can read dashboard_users"
on "public"."dashboard_users"
as permissive
for select
to authenticated
using (true);


create policy "Users with management access can delete dashboard_users"
on "public"."dashboard_users"
as permissive
for delete
to authenticated
using ((EXISTS ( SELECT 1
   FROM dashboard_users du
  WHERE ((du.user_id = ( SELECT auth.uid() AS uid)) AND (du.dashboard_id = dashboard_users.dashboard_id) AND (du.can_manage_users = true)))));


create policy "Users with management access can update dashboard_users"
on "public"."dashboard_users"
as permissive
for update
to authenticated
using ((EXISTS ( SELECT 1
   FROM dashboard_users du
  WHERE ((du.user_id = ( SELECT auth.uid() AS uid)) AND (du.dashboard_id = dashboard_users.dashboard_id) AND (du.can_manage_users = true)))))
with check ((EXISTS ( SELECT 1
   FROM dashboard_users du
  WHERE ((du.user_id = ( SELECT auth.uid() AS uid)) AND (du.dashboard_id = dashboard_users.dashboard_id) AND (du.can_manage_users = true)))));


create policy "Admins can delete dashboards"
on "public"."dashboards"
as permissive
for delete
to authenticated
using ((EXISTS ( SELECT 1
   FROM dashboard_users
  WHERE ((dashboard_users.user_id = ( SELECT auth.uid() AS uid)) AND (dashboard_users.dashboard_id = dashboards.id) AND (dashboard_users.is_admin = true)))));


create policy "Admins can update dashboards"
on "public"."dashboards"
as permissive
for update
to authenticated
using ((EXISTS ( SELECT 1
   FROM dashboard_users
  WHERE ((dashboard_users.user_id = ( SELECT auth.uid() AS uid)) AND (dashboard_users.dashboard_id = dashboards.id) AND (dashboard_users.is_admin = true)))));


create policy "Any user can create a dashboard"
on "public"."dashboards"
as permissive
for insert
to authenticated
with check (true);


create policy "Users can read dashboards"
on "public"."dashboards"
as permissive
for select
to authenticated
using (true);


create policy "Users with admin dashboard access can write"
on "public"."organizations"
as permissive
for all
to public
using ((EXISTS ( SELECT 1
   FROM dashboard_users
  WHERE ((dashboard_users.user_id = ( SELECT auth.uid() AS uid)) AND (dashboard_users.dashboard_id = organizations.dashboard_id) AND (dashboard_users.is_admin = true)))))
with check ((EXISTS ( SELECT 1
   FROM dashboard_users
  WHERE ((dashboard_users.user_id = ( SELECT auth.uid() AS uid)) AND (dashboard_users.dashboard_id = organizations.dashboard_id) AND (dashboard_users.is_admin = true)))));


create policy "Users with dashboard access can read"
on "public"."organizations"
as permissive
for select
to authenticated
using ((EXISTS ( SELECT 1
   FROM dashboard_users
  WHERE ((dashboard_users.user_id = ( SELECT auth.uid() AS uid)) AND (dashboard_users.dashboard_id = organizations.dashboard_id)))));


create policy "Authenticated Users can read the Users Table"
on "public"."users"
as permissive
for select
to authenticated
using (true);


create policy "Users can only update their own entry"
on "public"."users"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = id))
with check ((( SELECT auth.uid() AS uid) = id));



